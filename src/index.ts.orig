#!/usr/bin/env node

import { Command } from "commander";
import * as fs from "fs";
import * as path from "path";
import * as figlet from "figlet";

const program = new Command();

console.log(figlet.textSync("chjs"));

import { connect } from './connect/connect.js';
import { listDir } from './chfs/chfs.js';
import { fetchFeed } from './feed/feed.js';
import { listDirContents, createDir, createFile } from './lfs/lfs.js'

program
  .version("1.0.0")
  .description("A CLI for ChRIS");

program
  .command('connect')
  .description('Connect to a ChRIS instance')
  .requiredOption('--user <user>', 'Username for authentication')
  .requiredOption('--password <password>', 'Password for authentication')
  .argument('<url>', 'URL of the ChRIS instance')
  .action(async (url, options) => {
    try {
      await connect({
        user: options.user,
        password: options.password,
        url: url
      });
    } catch (error) {
      console.error('Failed to connect:', error);
    }
  });

program
  .option("-l, --ls [value]", "List directory contents")
  .option("-m, --mkdir <value>", "Create a directory")
  .option("-t, --touch <value>", "Create a file");

program.parse(process.argv);

const options = program.opts();

async function main() {
  if (options.ls) {
    const filepath = typeof options.ls === "string" ? options.ls : process.cwd();
    await listDirContents(filepath);
  }
  if (options.mkdir) {
    createDir(path.resolve(process.cwd(), options.mkdir));
  }
  if (options.touch) {
    createFile(path.resolve(process.cwd(), options.touch));
  }
}

if (!program.commands.find(cmd => cmd.name() === program.args[0])) {
  main().catch(error => {
    console.error('An error occurred:', error);
    process.exit(1);
  });
}

